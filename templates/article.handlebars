<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="author" content="Craig Fletcher (leakypixel)">
<meta name="description" content=
"Craig Fletcher's personal site: blog, contact and work.">
<meta name="viewport" content=
"width=device-width, initial-scale=1">
<link rel="stylesheet" href="styles.css">
<title>leakypixel.net</title>
</head>
<body>
<header>
<div><img src="pixel.svg"></div>
<div class="switches"><button class="lightswitch" onclick=
"lightMode(true)" title="Light mode">☼</button> <button class=
"darkswitch" onclick="darkMode(true)">☽</button></div>
</header>
<section>
<h1>Wireguard on OpenWRT with Luci</h1>
<h2>11th August 2019</h2>
<p>Rambla Alt is a variation of Rambla, which has certain
modifications without altering its main structure (Rambla is also
available in Myfonts). For this reason Rambla Alt is great when
used together with Rambla. Rambla Alt is a humanist sans for
medium-long <a href="google.com">texts</a>. It’s slightly
condensed, with a generous x-height and short ascender/descenders.
Its proportions have the objective of gaining space in height and
width. It’s elegant in large sizes and legible at the same time,
with a lot of rhythm in small sizes.</p>
<img src="big.jpg">
<h3>Subheading</h3>
<p>Rambla Alt is a variation of Rambla, which has certain
modifications without altering its main structure (Rambla is also
available in Myfonts). For this reason Rambla Alt is great when
used together with Rambla. Rambla Alt is a humanist sans for
medium-long <a href="google.com">texts</a>. It’s slightly
condensed, with a generous x-height and short ascender/descenders.
Its proportions have the objective of gaining space in height and
width. It’s elegant in large sizes and legible at the same time,
with a lot of rhythm in small sizes.</p>
<a class="blocklink" href="/blog">Read more</a></section>
<footer>
<ul>
<li><a href="/blog">Blog</a></li>
<li><a href="/blog">Work</a></li>
<li><a href="/blog">Contact</a></li>
</ul>
</footer>
<script type="text/javascript">

    function darkMode(remember) {
      // Set the theme to dark and optionally remember the preference.
      document.body.classList.remove('light');
      document.body.classList.add('dark');
      if (remember) {
        console.log("Saving theme preference as dark.");
        window.localStorage.setItem("theme-preference", "dark");
      }
    }

    function lightMode(remember) {
      // Set the theme to light and optionally remember the preference.
      document.body.classList.remove('dark');
      document.body.classList.add('light');
      if (remember) {
        console.log("Saving theme preference as light.");
        window.localStorage.setItem("theme-preference", "light");
      }
    }

    function setThemeFromHour() {
    // If the user has set no preference, do some rudimentary switching based on
    // hour of the day.
      const hour = new Date().getHours();
      const noPreference = window.matchMedia("(prefers-color-scheme:no-preference)").matches;
      if (noPreference) {
        console.log("Setting theme based on hour.");
        if (
          hour > 18 &&
          hour <7
        ) {
          darkMode();
        } else {
          lightMode();
        }
      } else {
        console.log("Setting theme based system preference.");
      }
    }

    // If the user has previously set either way, restore that.
    const preference = window.localStorage.getItem("theme-preference");
    switch (preference) {
      case "dark":
        console.log("Setting theme to dark based on user preference.");
        darkMode();
        break;
      case "light":
        console.log("Setting theme to light based on user preference.");
        lightMode();
        break;
      default:
        setThemeFromHour();
    }
</script>
</body>
</html>
